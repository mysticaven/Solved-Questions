import java.util.*;
//easy version distinct
public class SubarrayMaxK1 {
    public static int countSubarraysWithMaxK1Distinct(int[] arr, int k1) {
        int n = arr.length;
        int idx = -1;
        for (int i = 0; i < n; i++) {
            if (arr[i] == k1) {
                idx = i;
                break;
            }
        }
        if (idx == -1) return 0;

        int l = -1, r = n;
        for (int i = idx - 1; i >= 0; i--) {
            if (arr[i] > k1) {
                l = i;
                break;
            }
        }
        for (int i = idx + 1; i < n; i++) {
            if (arr[i] > k1) {
                r = i;
                break;
            }
        }

        int x = idx - l - 1;
        int y = r - idx - 1;
        return (x + 1) * (y + 1);
    }
//hard with repeated
    public static int countSubarraysWithMaxK1Repeated(int[] arr, int k1) {
        int n = arr.length;
        int[] prevGreater = new int[n];
        int[] nextGreater = new int[n];
        Arrays.fill(prevGreater, -1);
        Arrays.fill(nextGreater, n);

        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && arr[st.peek()] < arr[i]) {
                nextGreater[st.pop()] = i;
            }
            st.push(i);
        }

        st.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && arr[st.peek()] < arr[i]) {
                prevGreater[st.pop()] = i;
            }
            st.push(i);
        }

        List<Integer> k1Indices = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (arr[i] == k1) {
                k1Indices.add(i);
            }
        }

        int ans = 0;
        for (int i = 0; i < k1Indices.size(); i++) {
            int idx = k1Indices.get(i);
            int l = prevGreater[idx];
            int r = nextGreater[idx];
            for (int j = idx + 1; j < n; j++) {
                if (arr[j] == k1) {
                    r = Math.min(r, j);
                    break;
                }
            }
            int x = idx - l - 1;
            int y = r - idx - 1;
            ans += (x + 1) * (y + 1);
        }

        return ans;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5, 2, 4};
        int k1 = 5;
        System.out.println(countSubarraysWithMaxK1Distinct(arr1, k1));

        int[] arr2 = {1, 5, 2, 5, 3, 5, 4};
        System.out.println(countSubarraysWithMaxK1Repeated(arr2, k1));
    }
}
